

CREATE TABLE  "APPOINTMENT_DETAIL" 
   (	"APPOINTMENT_MASTER_ID" NUMBER, 
	"SERVICE_ID" NUMBER, 
	"SERVICE_RATE" NUMBER, 
	"DETAIL_ID" NUMBER, 
	 CONSTRAINT "APPOINTMENT_DETAIL_CON" PRIMARY KEY ("DETAIL_ID")
  USING INDEX  ENABLE
   )
/
ALTER TABLE  "APPOINTMENT_DETAIL" ADD FOREIGN KEY ("APPOINTMENT_MASTER_ID")
	  REFERENCES  "APPOINTMENT_MASTER" ("APPOINTMENT_MASTER_ID") ENABLE
/
ALTER TABLE  "APPOINTMENT_DETAIL" ADD FOREIGN KEY ("SERVICE_ID")
	  REFERENCES  "SERVICES" ("SERVICE_ID") ENABLE
/

CREATE OR REPLACE EDITIONABLE TRIGGER  "ID_TRI" 
before insert
on APPOINTMENT_DETAIL
for each row
begin
:new.DETAIL_ID := test_seq.nextval;
end ;

/
ALTER TRIGGER  "ID_TRI" ENABLE
/

CREATE OR REPLACE EDITIONABLE TRIGGER  "TEST_TRIGGER" 
before insert on APPOINTMENT_DETAIL
for each row
begin
select test_seq.nextval into :new.DETAIL_ID from dual;
end;

/
ALTER TRIGGER  "TEST_TRIGGER" ENABLE
/

CREATE OR REPLACE EDITIONABLE TRIGGER  "app_TOTAL" 
 after insert or update or delete on APPOINTMENT_DETAIL
begin
 -- Update the Order Total when any order item is changed 
update APPOINTMENT_MASTER 
set TOTAL_PRICE = (select sum(SERVICE_RATE) 
from APPOINTMENT_DETAIL
where APPOINTMENT_DETAIL.APPOINTMENT_MASTER_ID = APPOINTMENT_MASTER .APPOINTMENT_MASTER_ID); 
end;

/
ALTER TRIGGER  "app_TOTAL" DISABLE
/

CREATE OR REPLACE EDITIONABLE TRIGGER  "app_service_inactive" 
after insert on APPOINTMENT_DETAIL
for each row
declare 
vlu number;
begin 
select count(APPOINTMENT_MASTER_ID) into vlu 
from APPOINTMENT_MASTER
where APPOINTMENT_MASTER_ID=:NEW.APPOINTMENT_MASTER_ID;
if vlu is not null then 
update APPOINTMENT_MASTER 
set APPOINTMENT_STATUS='Inactive'
where APPOINTMENT_MASTER_ID=:NEW.APPOINTMENT_MASTER_ID;
end if;
end;

/
ALTER TRIGGER  "app_service_inactive" DISABLE
/


CREATE TABLE  "APPOINTMENT_DETAIL2" 
   (	"APPOINTMENT_MASTER_ID" NUMBER, 
	"PACKAGE_MASTER_ID" NUMBER, 
	"PACKAGE_RATE" NUMBER, 
	"DETAIL_ID_2" NUMBER, 
	 CONSTRAINT "APPOINTMENT_DETAIL2_CON1" PRIMARY KEY ("DETAIL_ID_2")
  USING INDEX  ENABLE
   )
/
ALTER TABLE  "APPOINTMENT_DETAIL2" ADD CONSTRAINT "APPOINTMENT_DETAIL2_CON" FOREIGN KEY ("APPOINTMENT_MASTER_ID")
	  REFERENCES  "APPOINTMENT_MASTER" ("APPOINTMENT_MASTER_ID") ENABLE
/
ALTER TABLE  "APPOINTMENT_DETAIL2" ADD CONSTRAINT "APPOINTMENT_DETAIL2_CON2" FOREIGN KEY ("PACKAGE_MASTER_ID")
	  REFERENCES  "PACKAGE_ASSIGN_MASTER" ("PACKAGE_MASTER_ID") ENABLE
/

CREATE OR REPLACE EDITIONABLE TRIGGER  "ID_TRI1" 
before insert
on APPOINTMENT_DETAIL2
for each row
begin
:new.DETAIL_ID_2 := test_seq1.nextval;
end ;

/
ALTER TRIGGER  "ID_TRI1" ENABLE
/

CREATE OR REPLACE EDITIONABLE TRIGGER  "app_TOTAL1" 
 after insert or update or delete on APPOINTMENT_DETAIL2
begin
 -- Update the Order Total when any order item is changed 
update APPOINTMENT_MASTER 
set TOTAL_PRICE = (select PACKAGE_RATE 
from APPOINTMENT_DETAIL2
where APPOINTMENT_DETAIL2.APPOINTMENT_MASTER_ID = APPOINTMENT_MASTER .APPOINTMENT_MASTER_ID); 
end;

/
ALTER TRIGGER  "app_TOTAL1" DISABLE
/



CREATE TABLE  "APPOINTMENT_MASTER" 
   (	"APPOINTMENT_MASTER_ID" NUMBER, 
	"APPOINTMENT_DATE" DATE, 
	"TOTAL_PRICE" NUMBER, 
	"CUSTOMER_NAME" VARCHAR2(30), 
	"CUSTOMER_ADDRESS" VARCHAR2(30), 
	"PHONE_NO" VARCHAR2(30), 
	"APPOINTMENT_TYPE" VARCHAR2(30), 
	"APPOINTMENT_STATUS" VARCHAR2(30), 
	"APPOINTMENT_CREATING_DATE" DATE, 
	 PRIMARY KEY ("APPOINTMENT_MASTER_ID")
  USING INDEX  ENABLE
   )
/

CREATE TABLE  "APP_SEGMENTS" 
   (	"SEGMENTID" NUMBER, 
	"SEGMENTTITLE" VARCHAR2(40), 
	"SEGMENTPARENT" NUMBER, 
	"SEGMENTTYPE" VARCHAR2(50), 
	"PAGEID" NUMBER, 
	"ITEMROLE" VARCHAR2(50), 
	 CONSTRAINT "APP_SEGMENTS_PK" PRIMARY KEY ("SEGMENTID")
  USING INDEX  ENABLE
   )
/

CREATE OR REPLACE EDITIONABLE TRIGGER  "BI_APP_SEGMENTS" 
  before insert on "APP_SEGMENTS"               
  for each row  
begin   
  if :NEW."SEGMENTID" is null then 
    select "APP_SEGMENTS_SEQ".nextval into :NEW."SEGMENTID" from sys.dual; 
  end if; 
end;

/
ALTER TRIGGER  "BI_APP_SEGMENTS" ENABLE
/


CREATE TABLE  "APP_USERS" 
   (	"RECID" NUMBER NOT NULL ENABLE, 
	"USERID" VARCHAR2(50), 
	"GROUPID" NUMBER(4,0), 
	"PASSWORD" VARCHAR2(4000), 
	"ADMIN" VARCHAR2(1), 
	 CONSTRAINT "APP_USERS_PK" PRIMARY KEY ("RECID")
  USING INDEX  ENABLE, 
	 CONSTRAINT "USERID_UK" UNIQUE ("USERID")
  USING INDEX  ENABLE
   )
/
ALTER TABLE  "APP_USERS" ADD CONSTRAINT "FK_APP_USERS" FOREIGN KEY ("GROUPID")
	  REFERENCES  "GROUPS_MASTER" ("GROUPID") ENABLE
/

CREATE OR REPLACE EDITIONABLE TRIGGER  "APP_USERS_BI" 
  before insert ON app_users FOR EACH ROW
DECLARE
  Vrecid number;
BEGIN
  if :new.recid is null then
    select app_users_seq.nextval
      into Vrecid
      from dual;
    :new.recid := Vrecid;
  end if;
END;

/
ALTER TRIGGER  "APP_USERS_BI" ENABLE
/


CREATE TABLE  "APP_USERS" 
   (	"RECID" NUMBER NOT NULL ENABLE, 
	"USERID" VARCHAR2(50), 
	"GROUPID" NUMBER(4,0), 
	"PASSWORD" VARCHAR2(4000), 
	"ADMIN" VARCHAR2(1), 
	 CONSTRAINT "APP_USERS_PK" PRIMARY KEY ("RECID")
  USING INDEX  ENABLE, 
	 CONSTRAINT "USERID_UK" UNIQUE ("USERID")
  USING INDEX  ENABLE
   )
/
ALTER TABLE  "APP_USERS" ADD CONSTRAINT "FK_APP_USERS" FOREIGN KEY ("GROUPID")
	  REFERENCES  "GROUPS_MASTER" ("GROUPID") ENABLE
/

CREATE OR REPLACE EDITIONABLE TRIGGER  "APP_USERS_BI" 
  before insert ON app_users FOR EACH ROW
DECLARE
  Vrecid number;
BEGIN
  if :new.recid is null then
    select app_users_seq.nextval
      into Vrecid
      from dual;
    :new.recid := Vrecid;
  end if;
END;

/
ALTER TRIGGER  "APP_USERS_BI" ENABLE
/


CREATE TABLE  "EMPLOYEE" 
   (	"EMPLOYEE_ID" NUMBER, 
	"EMPLOYEE_NAME" VARCHAR2(20), 
	"ADDRESS" VARCHAR2(30), 
	"MOBILE_NO" VARCHAR2(20), 
	"JOB_ID" VARCHAR2(30), 
	"JOINING_DATE" DATE, 
	"PHOTO" BLOB, 
	"SERVICE_TYPE_ID" NUMBER, 
	 PRIMARY KEY ("EMPLOYEE_ID")
  USING INDEX  ENABLE
   )
/
ALTER TABLE  "EMPLOYEE" ADD CONSTRAINT "EMPLOYEE_CON" FOREIGN KEY ("SERVICE_TYPE_ID")
	  REFERENCES  "SERVICE_TYPE" ("SERVICE_TYPE_ID") ENABLE


CREATE TABLE  "GROUPS_DETAIL" 
   (	"GROUPID" NUMBER(4,0), 
	"SEGMENTID" NUMBER, 
	"SEGMENTPARENT" NUMBER, 
	"SEGMENTTYPE" VARCHAR2(4), 
	"PAGEID" NUMBER(4,0), 
	"ITEMROLE" VARCHAR2(10), 
	"ALLOW_ACCESS" VARCHAR2(1)
   )
/
ALTER TABLE  "GROUPS_DETAIL" ADD CONSTRAINT "FK_GROUP_DETAILS" FOREIGN KEY ("GROUPID")
	  REFERENCES  "GROUPS_MASTER" ("GROUPID") ENABLE
/
ALTER TABLE  "GROUPS_DETAIL" ADD CONSTRAINT "FK_USER_GROUP" FOREIGN KEY ("SEGMENTID")
	  REFERENCES  "APP_SEGMENTS" ("SEGMENTID") ENABLE
/

CREATE TABLE  "GROUPS_MASTER" 
   (	"GROUPID" NUMBER(4,0), 
	"GROUPTITLE" VARCHAR2(25), 
	 CONSTRAINT "GROUPS_PK" PRIMARY KEY ("GROUPID")
  USING INDEX  ENABLE
   )
/

CREATE TABLE  "PACKAGE_ASSIGN_DETAIL" 
   (	"PACKAGE_DETAIL_ID" NUMBER, 
	"PACKAGE_MASTER_ID" NUMBER, 
	"SERVICE_ID" NUMBER, 
	"SERVICE_RATE" NUMBER
   )
/
ALTER TABLE  "PACKAGE_ASSIGN_DETAIL" ADD CONSTRAINT "PACKAGE_ASSIGN_DETAIL_CON" FOREIGN KEY ("PACKAGE_MASTER_ID")
	  REFERENCES  "PACKAGE_ASSIGN_MASTER" ("PACKAGE_MASTER_ID") ENABLE
/
ALTER TABLE  "PACKAGE_ASSIGN_DETAIL" ADD CONSTRAINT "PACKAGE_ASSIGN_DETAIL_SERVICE_ID_FK" FOREIGN KEY ("SERVICE_ID")
	  REFERENCES  "SERVICES" ("SERVICE_ID") ENABLE
/

CREATE TABLE  "PACKAGE_ASSIGN_MASTER" 
   (	"PACKAGE_MASTER_ID" NUMBER, 
	"PACKAGE_NAME" VARCHAR2(20), 
	"PACKAGE_RATE" NUMBER, 
	"PACKAGE_DESCRIPTION" VARCHAR2(30), 
	"OFFER_STARTING_DATE" DATE, 
	"OFFER_ENDING_DATE" DATE, 
	"SERVICE_TOTAL_AMOUNT" NUMBER, 
	"DISCOUNT" NUMBER, 
	 PRIMARY KEY ("PACKAGE_MASTER_ID")
  USING INDEX  ENABLE
   )
/

CREATE TABLE  "PAYMENT" 
   (	"PAYMENT_ID" NUMBER, 
	"APPOINTMENT_MASTER_ID" NUMBER, 
	"INVOICE_NUMBER" NUMBER, 
	"PAYMENT_METHOD" VARCHAR2(20), 
	"PAYMENT_DATE" DATE, 
	"PAYMENT_AMOUNT" NUMBER, 
	"DETAIL_ID" NUMBER, 
	"DETAIL_ID_2" NUMBER, 
	"CUSTOMER_NAME" VARCHAR2(30), 
	 PRIMARY KEY ("PAYMENT_ID")
  USING INDEX  ENABLE
   )
/
ALTER TABLE  "PAYMENT" ADD CONSTRAINT "PAYMENT_CON" FOREIGN KEY ("DETAIL_ID")
	  REFERENCES  "APPOINTMENT_DETAIL" ("DETAIL_ID") ENABLE
/
ALTER TABLE  "PAYMENT" ADD CONSTRAINT "PAYMENT_CON3" FOREIGN KEY ("DETAIL_ID_2")
	  REFERENCES  "APPOINTMENT_DETAIL2" ("DETAIL_ID_2") ENABLE
/
ALTER TABLE  "PAYMENT" ADD FOREIGN KEY ("APPOINTMENT_MASTER_ID")
	  REFERENCES  "APPOINTMENT_MASTER" ("APPOINTMENT_MASTER_ID") ENABLE
/

CREATE OR REPLACE EDITIONABLE TRIGGER  "app_status_active" 
after insert on PAYMENT
for each row
declare 
vlu number;
begin 
select count(APPOINTMENT_MASTER_ID) into vlu 
from APPOINTMENT_MASTER
where APPOINTMENT_MASTER_ID=:NEW.APPOINTMENT_MASTER_ID;
if vlu is not null then 
update APPOINTMENT_MASTER 
set APPOINTMENT_STATUS='Active'
where APPOINTMENT_MASTER_ID=:NEW.APPOINTMENT_MASTER_ID;
end if;
end;

/
ALTER TRIGGER  "app_status_active" ENABLE
/
*****SERVICES
CREATE TABLE  "SERVICES" 
   (	"SERVICE_ID" NUMBER, 
	"SERVICE_NAME" VARCHAR2(20), 
	"SERVICE_RATE" NUMBER, 
	"SERVICE_TYPE_ID" NUMBER, 
	 PRIMARY KEY ("SERVICE_ID")
  USING INDEX  ENABLE
   )
/
ALTER TABLE  "SERVICES" ADD CONSTRAINT "SERVICES_CON1" FOREIGN KEY ("SERVICE_TYPE_ID")
	  REFERENCES  "SERVICE_TYPE" ("SERVICE_TYPE_ID") ENABLE
/

CREATE TABLE  "SERVICE_TYPE" 
   (	"SERVICE_TYPE_ID" NUMBER, 
	"SERVICE_TYPE_NAME" VARCHAR2(30), 
	"EMPLOYEE_ID" NUMBER, 
	 CONSTRAINT "SERVICE_TYPE_CON" PRIMARY KEY ("SERVICE_TYPE_ID")
  USING INDEX  ENABLE
   )
/
ALTER TABLE  "SERVICE_TYPE" ADD CONSTRAINT "SERVICE_TYPE_CON1" FOREIGN KEY ("EMPLOYEE_ID")
	  REFERENCES  "EMPLOYEE" ("EMPLOYEE_ID") ENABLE
/
